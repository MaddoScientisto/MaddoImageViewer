@page "/"
@using MauiApp1Blazor.Data
@using MauiApp1Blazor.Services
@using System.Linq
@inject IFisherYatesService FisherYates
@inject IDbService DbService;

<button @onclick="LoadImages">Load images</button>
<button @onclick="Shuffle">Shuffle</button>
<button @onclick="Restart">Start slideshow</button>
<button @onclick="ShowPrevious">Previous</button>
<button @onclick="ShowNext">Next</button>

@if (loadedImages != null)
{
    <ul>
        @foreach (var image in loadedImages)
        {
            <li>@image.FileName</li>
        }
    </ul>
}

<p>@fileName</p>
<img src="@imageSource" />



@code {
    string fileName = "";
    string imageSource;
    private int imageIndex = 0;

    private List<FileData> loadedImages;

    private async Task Test()
    {
        var result = await PickAndShow(PickOptions.Default);

    }

    async void OnClicked(object sender, EventArgs args)
    {
        var result = await PickAndShow(new PickOptions()
            {
                FileTypes = FilePickerFileType.Images
            });
    }

    private async Task LoadImages()
    {
        var res = await FilePicker.PickMultipleAsync(new PickOptions()
            {
                FileTypes = FilePickerFileType.Images
            });

        // TODO: Save results somehow

        var data = res.Select(x => new FileData()
            {
                FileName = x.FileName,
                FullPath = x.FullPath,
                FolderPath = Path.GetDirectoryName(x.FullPath)
            });

        loadedImages = data.ToList();
        await Restart();
    }

    private async Task Restart()
    {
        imageIndex = -1;
        await ShowNext();
    }

    private async Task Shuffle()
    {
        var resArray = loadedImages.ToArray();
        FisherYates.Shuffle(resArray);

        loadedImages = resArray.ToList();

    }

    private async Task ShowNext()
    {
        await ShowImage(loadedImages[++imageIndex]);
    }

    private async Task ShowPrevious()
    {
        await ShowImage(loadedImages[--imageIndex]);
    }

    private async Task ShowImage(FileData pic)
    {
        byte[] imageBytes = await System.IO.File.ReadAllBytesAsync(pic.FullPath);
        string base64String = Convert.ToBase64String(imageBytes);

        if (pic.FileName.EndsWith("jpg", StringComparison.OrdinalIgnoreCase))
        {
            imageSource = $"data:image/jpg;base64,{base64String}";
        }
        else if (pic.FileName.EndsWith("png", StringComparison.OrdinalIgnoreCase))
        {
            imageSource = $"data:image/png;base64,{base64String}";
        }
    }

    async Task<FileResult> PickAndShow(PickOptions options)
    {
        try
        {

            var result = await FilePicker.PickAsync(options);
            if (result != null)
            {
                fileName = $"File Name: {result.FileName}";
                if (result.FileName.EndsWith("jpg", StringComparison.OrdinalIgnoreCase) ||
                    result.FileName.EndsWith("png", StringComparison.OrdinalIgnoreCase))
                {
                    //var stream = await result.OpenReadAsync();

                    byte[] imageBytes = await System.IO.File.ReadAllBytesAsync(result.FullPath);

                    //var asdf = ImageSource.FromStream(() => stream);

                    //Image = ImageSource.FromStream(() => stream);

                    string base64String = Convert.ToBase64String(imageBytes);

                    imageSource = $"data:image/jpg;base64,{base64String}";
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            // The user canceled or something went wrong
        }

        return null;
    }
}